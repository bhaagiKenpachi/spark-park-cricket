name: Backend CI/CD

on:
  # Automatic triggers
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  
  # Manual trigger - available on all branches
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
      run_linter:
        description: 'Run linter checks'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      build_binary:
        description: 'Build binary'
        required: false
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to (if applicable)'
        required: false
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  GO_VERSION: '1.23'
  WORKING_DIRECTORY: './backend'
  # Test environment variables
  TEST_SCHEMA: 'testing_db'
  PORT: '8080'
  TEST_TIMEOUT: '30s'
  TEST_CLEANUP: 'true'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_linter == true || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Run golangci-lint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Install golangci-lint if not present
          if ! command -v golangci-lint &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          fi
          golangci-lint run --timeout=5m

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'unit') || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Run unit tests using Makefile
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: make test-unit

      - name: Generate coverage report
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          go test -v -race -coverprofile=coverage.out ./tests/unit/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage.*

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'integration') || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Setup test environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Copy test environment file
          cp env.test .env
          echo "✅ Test environment configured"

      - name: Run integration tests using Makefile
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          TEST_SCHEMA: ${{ env.TEST_SCHEMA }}
          PORT: ${{ env.PORT }}
          TEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          TEST_CLEANUP: ${{ env.TEST_CLEANUP }}
        run: make test-integration

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'e2e') || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Setup test environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Copy test environment file
          cp env.test .env
          echo "✅ Test environment configured"

      - name: Run E2E tests using Makefile
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          TEST_SCHEMA: ${{ env.TEST_SCHEMA }}
          PORT: ${{ env.PORT }}
          TEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          TEST_CLEANUP: ${{ env.TEST_CLEANUP }}
        run: make test-e2e

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'performance') || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Setup test environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Copy test environment file
          cp env.test .env
          echo "✅ Test environment configured"

      - name: Run performance tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          TEST_SCHEMA: ${{ env.TEST_SCHEMA }}
          PORT: ${{ env.PORT }}
          TEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          TEST_CLEANUP: ${{ env.TEST_CLEANUP }}
        run: go test -v -bench=. -benchmem ./tests/performance/...

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.build_binary == true || github.event_name != 'workflow_dispatch' }}
    needs: [lint, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Build using Makefile
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: make build

      - name: Build for multiple platforms
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o server-linux ./cmd/server
          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o server-darwin ./cmd/server
          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o server-windows.exe ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: ${{ env.WORKING_DIRECTORY }}/server-*

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Install gosec
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: ${{ env.WORKING_DIRECTORY }}/gosec-report.json

  summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, performance-tests, build, security-scan]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## Backend CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if: ${{ github.event_name == 'workflow_dispatch' }}
          echo "**Manual Inputs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Test Type: ${{ inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run Linter: ${{ inputs.run_linter }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run Tests: ${{ inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Binary: ${{ inputs.build_binary }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY