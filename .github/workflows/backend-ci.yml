name: Backend CI/CD

on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
      run_linter:
        description: 'Run linter checks'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      build_binary:
        description: 'Build binary'
        required: false
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to (if applicable)'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  GO_VERSION: '1.23'
  WORKING_DIRECTORY: './backend'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_linter == true }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Verify dependencies
        run: go mod verify

      - name: Check code formatting
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Update go.mod before formatting
          go mod tidy
          
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          go vet ./...

      - name: Install staticcheck
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          staticcheck -checks="all,-S1000,-ST1000" ./...

      - name: Download dependencies for linting
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          go mod download
          go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ${{ env.WORKING_DIRECTORY }}
          args: --timeout=5m

  # Unit Tests (no database required, but Redis needed for cache tests)
  unit-tests:
    name: Unit Tests
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    if: ${{ github.event_name != 'workflow_dispatch' || (inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'unit')) }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Test Redis connection (if available)
        run: |
          if [ "$REDIS_AVAILABLE" = "true" ]; then
            echo "🧪 Testing Redis connection for unit tests..."
            redis-cli -h localhost -p 6379 set test_key "test_value"
            redis-cli -h localhost -p 6379 get test_key
            redis-cli -h localhost -p 6379 del test_key
            echo "✅ Redis connection test successful"
          else
            echo "⚠️ Skipping Redis connection test - Redis not available"
          fi

      - name: Run unit tests
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🧪 Running Unit Tests..."
          go test ./tests/unit/... -v -race -coverprofile=coverage.out
        env:
          REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || '' }}
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          CACHE_ENABLED: ${{ env.REDIS_AVAILABLE == 'true' }}

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.out
          flags: unit-tests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # Integration Tests (requires Supabase database and Redis)
  integration-tests:
    name: Integration Tests
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality, unit-tests]
    if: ${{ github.event_name != 'workflow_dispatch' || (inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'integration')) }}
    environment: ${{ inputs.environment || 'dev' }}
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Set up test environment
        run: |
          echo "🔧 Setting up test environment..."
          echo "Environment variables will be provided via GitHub Actions env"

      - name: Test Redis connection (if available)
        run: |
          if [ "$REDIS_AVAILABLE" = "true" ]; then
            echo "🧪 Testing Redis connection for integration tests..."
            redis-cli -h localhost -p 6379 set test_key "test_value"
            redis-cli -h localhost -p 6379 get test_key
            redis-cli -h localhost -p 6379 del test_key
            echo "✅ Redis connection test successful"
          else
            echo "⚠️ Skipping Redis connection test - Redis not available"
          fi

      - name: Run database migrations
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🗄️ Running database migrations..."
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_API_KEY: $SUPABASE_API_KEY"
          
          # Check if secrets are available
          if [ -z "$SUPABASE_URL" ]; then
            echo "❌ ERROR: SUPABASE_URL secret is not set in GitHub repository"
            echo "Please configure SUPABASE_URL in repository settings > Secrets and variables > Actions"
            exit 1
          fi
          
          if [ -z "$SUPABASE_API_KEY" ]; then
            echo "❌ ERROR: SUPABASE_API_KEY secret is not set in GitHub repository"
            echo "Please configure SUPABASE_API_KEY in repository settings > Secrets and variables > Actions"
            exit 1
          fi
          
          # Run the migration script
          go run cmd/migrate/main.go
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}

      - name: Set up test database schema
        run: |
          echo "🔧 Setting up test database schema..."
          # Note: This would typically run the setup_test_db.sql script
          # For now, we'll skip this step as it requires direct database access
          echo "⚠️ Test database schema setup skipped - requires direct database access"

      - name: Run integration tests
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🔗 Running Integration Tests..."
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_API_KEY: $SUPABASE_API_KEY"
          echo "TEST_SCHEMA: $TEST_SCHEMA"
          echo "REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || 'not available' }}"
          echo "CACHE_ENABLED: $CACHE_ENABLED"
          go test ./tests/integration/... -v -timeout=15m
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
          TEST_SCHEMA: testing_db
          REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || '' }}
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          CACHE_ENABLED: ${{ env.REDIS_AVAILABLE == 'true' }}

  # End-to-End Tests (requires Supabase database and Redis)
  e2e-tests:
    name: E2E Tests
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality, unit-tests, integration-tests]
    if: ${{ github.event_name != 'workflow_dispatch' || (inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'e2e')) }}
    environment: ${{ inputs.environment || 'dev' }}
    timeout-minutes: 15
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Set up test environment
        run: |
          echo "🔧 Setting up E2E test environment..."
          echo "Environment variables will be provided via GitHub Actions env"

      - name: Run database migrations for E2E tests
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🗄️ Running database migrations for E2E tests..."
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_API_KEY: $SUPABASE_API_KEY"
          
          # Check if secrets are available
          if [ -z "$SUPABASE_URL" ]; then
            echo "❌ ERROR: SUPABASE_URL secret is not set in GitHub repository"
            echo "Please configure SUPABASE_URL in repository settings > Secrets and variables > Actions"
            exit 1
          fi
          
          if [ -z "$SUPABASE_API_KEY" ]; then
            echo "❌ ERROR: SUPABASE_API_KEY secret is not set in GitHub repository"
            echo "Please configure SUPABASE_API_KEY in repository settings > Secrets and variables > Actions"
            exit 1
          fi
          
          # Run the migration script
          go run cmd/migrate/main.go
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}

      - name: Run E2E tests
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🌐 Running End-to-End Tests..."
          echo "SUPABASE_URL: $SUPABASE_URL"
          echo "SUPABASE_API_KEY: $SUPABASE_API_KEY"
          echo "TEST_SCHEMA: $TEST_SCHEMA"
          echo "REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || 'not available' }}"
          echo "CACHE_ENABLED: $CACHE_ENABLED"
          go test ./tests/e2e/... -v -timeout=15m
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_API_KEY: ${{ secrets.SUPABASE_API_KEY }}
          TEST_SCHEMA: testing_db
          REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || '' }}
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          CACHE_ENABLED: ${{ env.REDIS_AVAILABLE == 'true' }}

  # Performance Tests (requires Redis for cache benchmarks)
  performance-tests:
    name: Performance Tests
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality, unit-tests]
    if: ${{ github.event_name != 'workflow_dispatch' || (inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'performance')) }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Test Redis connection (if available)
        run: |
          if [ "$REDIS_AVAILABLE" = "true" ]; then
            echo "🧪 Testing Redis connection for performance tests..."
            redis-cli -h localhost -p 6379 set test_key "test_value"
            redis-cli -h localhost -p 6379 get test_key
            redis-cli -h localhost -p 6379 del test_key
            echo "✅ Redis connection test successful"
          else
            echo "⚠️ Skipping Redis connection test - Redis not available"
          fi

      - name: Run cache performance tests
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "⚡ Running Cache Performance Tests..."
          echo "REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || 'not available' }}"
          echo "CACHE_ENABLED: $CACHE_ENABLED"
          go test -bench=BenchmarkCacheOperations -benchmem -v ./tests/performance/
        env:
          REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || '' }}
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          CACHE_ENABLED: ${{ env.REDIS_AVAILABLE == 'true' }}

      - name: Run cache vs database comparison
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "📊 Running Cache vs Database Comparison..."
          go test -bench=BenchmarkCacheVsDatabase -benchmem -v ./tests/performance/
        env:
          REDIS_URL: ${{ env.REDIS_AVAILABLE == 'true' && 'localhost:6379' || '' }}
          REDIS_PASSWORD: ""
          REDIS_DB: 0
          CACHE_ENABLED: ${{ env.REDIS_AVAILABLE == 'true' }}

  # Build Verification
  build:
    name: Build Verification
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, performance-tests]
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_binary == true }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: false

      - name: Set up Go environment
        run: |
          # Set up Go environment with explicit configuration
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          # Add to environment for subsequent steps
          echo "PATH=/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH" >> $GITHUB_ENV
          echo "GOSUMDB=sum.golang.org" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build application
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🔨 Building application..."
          go build -o bin/server cmd/server/main.go
          echo "✅ Build completed successfully"

      - name: Test binary
        run: |
          echo "🧪 Testing binary..."
          ./bin/server --help || echo "Binary built successfully (help flag not implemented)"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend/bin/server
          retention-days: 7

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality]
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_linter == true }}
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Redis availability (optional)
        run: |
          echo "🔍 Checking Redis availability on self-hosted runner..."
          if command -v redis-cli >/dev/null 2>&1 && redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
            echo "✅ Redis is available and accessible on localhost:6379"
            echo "Redis version: $(redis-cli --version)"
            echo "Redis info:"
            redis-cli info server | head -5
            echo "REDIS_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "⚠️ Redis is not available or not accessible"
            echo "Tests will run without Redis caching"
            echo "REDIS_AVAILABLE=false" >> $GITHUB_ENV
          fi

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run Go Security Check
        run: |
          # Set up Go environment explicitly
          export PATH="/bin:/usr/bin:/usr/local/bin:/usr/local/go/bin:/home/github-runner/go/bin:$PATH"
          export GOSUMDB="sum.golang.org"
          export GOPROXY="https://proxy.golang.org,direct"
          
          echo "🔍 Running basic security checks..."
          # Run go vet for basic security checks
          go vet ./...
          echo "✅ Basic security checks completed"

  # Notification on failure
  notify-failure:
    name: Notify on Failure
    runs-on: [self-hosted, ovh, ubuntu-22.04]
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, performance-tests, build]
    if: always() && (needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.e2e-tests.result == 'failure' || needs.performance-tests.result == 'failure' || needs.build.result == 'failure')
    
    steps:
      - name: Notify failure
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Check the logs for details."
          # Add notification logic here (Slack, email, etc.)