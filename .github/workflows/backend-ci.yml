name: Backend CI/CD

on:
  # Automatic triggers
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
      run_linter:
        description: 'Run linter checks'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean
      build_binary:
        description: 'Build binary'
        required: false
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to (if applicable)'
        required: false
        default: 'test'
        type: choice
        options:
          - test
          - staging
          - production

env:
  GO_VERSION: '1.23'
  WORKING_DIRECTORY: './backend'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_linter == true || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Run golangci-lint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Install golangci-lint if not present
          if ! command -v golangci-lint &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
          fi
          golangci-lint run --timeout=5m

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'unit') || github.event_name != 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          go test -v -race -coverprofile=coverage.out ./tests/unit/...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: ${{ env.WORKING_DIRECTORY }}/coverage.*

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'integration') || github.event_name != 'workflow_dispatch' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: spark_park_cricket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Wait for services
        run: |
          sleep 10
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          # Wait for Redis
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run integration tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: spark_park_cricket_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
        run: go test -v -race ./tests/integration/...

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'e2e') || github.event_name != 'workflow_dispatch' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: spark_park_cricket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Wait for services
        run: |
          sleep 10
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          # Wait for Redis
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: spark_park_cricket_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
        run: go build -o server ./cmd/server

      - name: Start server in background
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: spark_park_cricket_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
        run: |
          ./server > server.log 2>&1 &
          echo $! > server.pid
          sleep 5

      - name: Run E2E tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go test -v -race ./tests/e2e/...

      - name: Stop server
        if: always()
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests == true && (inputs.test_type == 'all' || inputs.test_type == 'performance') || github.event_name != 'workflow_dispatch' }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: spark_park_cricket_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Wait for services
        run: |
          sleep 10
          # Wait for PostgreSQL
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          # Wait for Redis
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run performance tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: spark_park_cricket_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          REDIS_PASSWORD: ""
        run: go test -v -bench=. -benchmem ./tests/performance/...

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.build_binary == true || github.event_name != 'workflow_dispatch' }}
    needs: [lint, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: go mod download

      - name: Build for Linux
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o server-linux ./cmd/server

      - name: Build for macOS
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o server-darwin ./cmd/server

      - name: Build for Windows
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o server-windows.exe ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-binaries
          path: ${{ env.WORKING_DIRECTORY }}/server-*

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'push' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Install gosec
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -fmt json -out gosec-report.json ./...

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: ${{ env.WORKING_DIRECTORY }}/gosec-report.json

  summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests, performance-tests, build, security-scan]
    if: always()
    
    steps:
      - name: Workflow Summary
        run: |
          echo "## Backend CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          if: ${{ github.event_name == 'workflow_dispatch' }}
          echo "**Manual Inputs:**" >> $GITHUB_STEP_SUMMARY
          echo "- Test Type: ${{ inputs.test_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run Linter: ${{ inputs.run_linter }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run Tests: ${{ inputs.run_tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Binary: ${{ inputs.build_binary }}" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY