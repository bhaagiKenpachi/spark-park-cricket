---
globs: web/**/*.tsx,web/**/*.css,web/**/*.scss
description: Mobile-first design principles for responsive web development
---

# Mobile-First Design Rules

## Core Principle
**All designs MUST be created for mobile devices first, with desktop as a secondary consideration.**

## Design Guidelines

### 1. Mobile-First Approach
- Start all designs with mobile viewport (320px - 768px)
- Use mobile-first breakpoints in Tailwind CSS
- Design for touch interactions, not mouse hover states
- Prioritize thumb-friendly navigation and button sizes

### 2. Layout Structure
- Use single-column layouts as the default
- Stack elements vertically on mobile
- Avoid complex multi-column grids on small screens
- Use full-width containers with appropriate padding

### 3. Typography and Spacing
- Use larger, more readable fonts for mobile
- Increase line height for better readability on small screens
- Use generous padding and margins for touch targets
- Minimum touch target size: 44px x 44px

### 4. Navigation
- Use bottom navigation or hamburger menus for mobile
- Keep navigation simple and accessible
- Avoid dropdown menus that are hard to use on touch devices
- Use clear, large navigation buttons

### 5. Content Prioritization
- Show only essential content on mobile
- Use progressive disclosure for secondary information
- Implement collapsible sections for detailed content
- Prioritize the most important actions

## Tailwind CSS Mobile-First Classes

### Breakpoint Usage
```tsx
// ✅ Good: Mobile-first approach
<div className="w-full p-4 md:w-1/2 lg:w-1/3">
  <button className="w-full py-3 px-6 md:w-auto">
    Mobile Button
  </button>
</div>

// ❌ Bad: Desktop-first approach
<div className="w-1/3 p-4 max-md:w-full">
  <button className="w-auto py-3 px-6 max-md:w-full">
    Desktop Button
  </button>
</div>
```

### Responsive Patterns
```tsx
// ✅ Good: Mobile-first responsive design
<div className="
  flex flex-col gap-4 p-4
  md:flex-row md:gap-6 md:p-6
  lg:gap-8 lg:p-8
">
  <div className="w-full md:w-1/2 lg:w-1/3">
    Content
  </div>
</div>
```

## Component Design Rules

### 1. Form Components
- Use full-width inputs on mobile
- Stack form fields vertically
- Use large, easy-to-tap buttons
- Implement proper keyboard navigation

### 2. Card Components
- Use full-width cards on mobile
- Stack card content vertically
- Use clear visual hierarchy
- Ensure adequate spacing between elements

### 3. Button Components
- Minimum 44px height for touch targets
- Use full-width buttons on mobile when appropriate
- Provide clear visual feedback for touch states
- Use appropriate button sizes for different contexts

### 4. Navigation Components
- Use bottom navigation for primary actions
- Implement hamburger menus for secondary navigation
- Ensure navigation is accessible with one hand
- Use clear visual indicators for active states

## Testing Requirements

### Mobile Testing
- Test on actual mobile devices
- Use browser dev tools mobile simulation
- Test touch interactions and gestures
- Verify readability and usability on small screens

### Responsive Testing
- Test at common breakpoints: 320px, 375px, 414px, 768px, 1024px
- Ensure smooth transitions between breakpoints
- Verify that content remains accessible at all sizes
- Test both portrait and landscape orientations

## Performance Considerations

### Mobile Performance
- Optimize images for mobile devices
- Use appropriate image sizes for different screen densities
- Minimize JavaScript bundle size
- Implement lazy loading for non-critical content

### Loading States
- Show loading indicators for async operations
- Implement skeleton screens for better perceived performance
- Use progressive loading for large datasets
- Provide offline functionality where possible

## Accessibility on Mobile

### Touch Accessibility
- Ensure all interactive elements are touch-friendly
- Provide adequate spacing between clickable elements
- Use appropriate contrast ratios for mobile screens
- Implement proper focus management for keyboard navigation

### Screen Reader Support
- Use semantic HTML elements
- Provide proper ARIA labels for mobile-specific interactions
- Ensure content is accessible without visual cues
- Test with mobile screen readers

## Examples

### Good Mobile-First Component
```tsx
export function MobileFirstCard({ title, content, action }: CardProps) {
  return (
    <div className="
      w-full p-4 bg-white rounded-lg shadow-sm
      md:p-6 md:shadow-md
      lg:p-8 lg:shadow-lg
    ">
      <h3 className="text-lg font-semibold mb-3 md:text-xl lg:text-2xl">
        {title}
      </h3>
      <p className="text-sm text-gray-600 mb-4 md:text-base lg:text-lg">
        {content}
      </p>
      <button className="
        w-full py-3 px-4 bg-blue-600 text-white rounded-lg
        md:w-auto md:px-6
        lg:px-8
        active:bg-blue-700
        focus:outline-none focus:ring-2 focus:ring-blue-500
      ">
        {action}
      </button>
    </div>
  );
}
```

### Mobile-First Layout
```tsx
export function MobileFirstLayout({ children }: LayoutProps) {
  return (
    <div className="min-h-screen bg-gray-50">
      <header className="
        sticky top-0 z-50 bg-white border-b
        px-4 py-3
        md:px-6 md:py-4
        lg:px-8 lg:py-6
      ">
        <nav className="flex items-center justify-between">
          <h1 className="text-lg font-bold md:text-xl lg:text-2xl">
            Spark Park Cricket
          </h1>
          <button className="
            p-2 rounded-lg
            md:hidden
            focus:outline-none focus:ring-2 focus:ring-blue-500
          ">
            Menu
          </button>
        </nav>
      </header>
      
      <main className="
        px-4 py-6
        md:px-6 md:py-8
        lg:px-8 lg:py-12
      ">
        {children}
      </main>
    </div>
  );
}
```

## Enforcement
- All new components must follow mobile-first design principles
- Existing components should be refactored to be mobile-first
- Design reviews must include mobile testing
- Performance budgets must account for mobile constraints